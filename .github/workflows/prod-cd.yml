name: CD Production
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  PROJECTS_ROOT: 'itbalis-projects'
  DB_ADMIN_NAME: ${{ secrets.DB_ADMIN_NAME }}
  DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DB_NAME: ${{ secrets.DB_NAME }}
  EMAIL_LOGIN: ${{ secrets.EMAIL_LOGIN }}
  EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  MAIL_FROM: ${{ secrets.MAIL_FROM }}
  REGISTER_TOKEN_KEY: ${{ secrets.REGISTER_TOKEN_KEY }}
  ACCESS_TOKEN_KEY: ${{ secrets.ACCESS_TOKEN_KEY }}
  REFRESH_TOKEN_KEY: ${{ secrets.REFRESH_TOKEN_KEY }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  CLIENT_URLS: ${{ secrets.CLIENT_URLS }}
  CURRENCY_API_KEY: ${{ secrets.CURRENCY_API_KEY }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

on:
  push:
    branches:
      - main

jobs:
  Deploy-to-Production:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Local Artefacts
        run: pnpm install && pnpm build

      - name: Generate env file
        run: |
          echo "DB_ADMIN_NAME=${DB_ADMIN_NAME}" >> .env
          echo "DB_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD}" >> .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "EMAIL_LOGIN=${EMAIL_LOGIN}" >> .env
          echo "EMAIL_PASS=${EMAIL_PASS}" >> .env
          echo "SMTP_HOST=${SMTP_HOST}" >> .env
          echo "SMTP_PORT=${SMTP_PORT}" >> .env
          echo "SMTP_USER=${SMTP_USER}" >> .env
          echo "SMTP_PASSWORD=${SMTP_PASSWORD}" >> .env
          echo "MAIL_FROM=${MAIL_FROM}" >> .env
          echo "REGISTER_TOKEN_KEY=${REGISTER_TOKEN_KEY}" >> .env
          echo "ACCESS_TOKEN_KEY=${ACCESS_TOKEN_KEY}" >> .env
          echo "REFRESH_TOKEN_KEY=${REFRESH_TOKEN_KEY}" >> .env
          echo "CLIENT_URLS=${CLIENT_URLS}" >> .env
          echo "CURRENCY_API_KEY=${CURRENCY_API_KEY}" >> .env
          echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> .env
          echo "GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}" >> .env

      - name: Copy Build Artefacts and .env to VPS
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} "rm -rf /var/www/shoplist-be/*"
          sshpass -p "${SSH_PASSWORD}" rsync -avz --exclude 'node_modules/' --exclude '.git/' --exclude '.github/' -e "ssh -o StrictHostKeyChecking=no" ./ ${SSH_USER}@${SSH_HOST}:/var/www/shoplist-be

      - name: Restart Application
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} "
          export PATH=$PATH:/root/.nvm/versions/node/v20.15.1/bin &&
          cd /var/www/shoplist-be &&
          pnpm install --production &&
          pm2 stop shoplist-be || true &&
          pm2 delete shoplist-be || true &&
          pm2 start /var/www/shoplist-be/dist/main.js --name shoplist-be -- -p 5555 &&
          pm2 save"

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel and get Preview URL
        id: deploy
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}  > vercel_output.txt 2>&1
      - name: Extract URLs and add to summary
        run: |
          INSPECT_URL=$(grep -oP 'Inspect: \K(https://[^\s]+)' vercel_output.txt || echo "Not Found")
          echo "Production deployed :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "Inspect URL: $INSPECT_URL" >> $GITHUB_STEP_SUMMARY
          echo "Production URL: https://shoplist-be.vercel.app" >> $GITHUB_STEP_SUMMARY
